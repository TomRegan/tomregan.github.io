<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Java on tomregan.github.io</title><link>https://tomregan.github.io/tags/java/</link><description>Recent content in Java on tomregan.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 04 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tomregan.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Comparison method violates its general contract!</title><link>https://tomregan.github.io/posts/2025-04-04-comparison-method-violates-its-general-contract/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/2025-04-04-comparison-method-violates-its-general-contract/</guid><description>ComparatorVerifier is a library for verifying Comparators. Check it out!
Java&amp;rsquo;s standard sorting algorithm, TimSort, is a clever hybrid algorithm that uses a deceptively simple insight into the typical pattern of elements in arrays. Unfortunately the insight is couched deep in mathematical obscurity:
Entropy considerations provide a natural estimate of the number of comparisons to sort incompletely shuffled data. From an information theoretic viewpoint, the number of comparisons needed to sort a permutation is an upper bound on the Kolmogorov complexity of the permutation.</description></item><item><title>Using Jackson Deduction to Simplify Deserialisation</title><link>https://tomregan.github.io/posts/2024-05-30-using-jackson-deduction-to-simplify-deserialisation/using-jackson-deduction-to-simplify-deserialisation/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/2024-05-30-using-jackson-deduction-to-simplify-deserialisation/using-jackson-deduction-to-simplify-deserialisation/</guid><description>I find the documentation for Jackson is on the terse side, and dare I say obstructively self-referential. If you aren&amp;rsquo;t moved fully to tears by the Javadoc entries for JsonTypeInfo.As, you deserve an ACM award.
In short: I need a helpful and up-to-date guide, so I&amp;rsquo;m writing one.
What are we trying to do? We often want to vary the content of our JSON. It&amp;rsquo;s integral to the Envelope pattern for instance.</description></item></channel></rss>