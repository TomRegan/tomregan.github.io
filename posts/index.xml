<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on tomregan.github.io</title><link>https://tomregan.github.io/posts/</link><description>Recent content in Posts on tomregan.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 04 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tomregan.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Comparison method violates its general contract!</title><link>https://tomregan.github.io/posts/2025-04-04-comparison-method-violates-its-general-contract/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/2025-04-04-comparison-method-violates-its-general-contract/</guid><description>ComparatorVerifier is a library for verifying Comparators. Check it out!
Java&amp;rsquo;s standard sorting algorithm, TimSort, is a clever hybrid algorithm that uses a deceptively simple insight into the typical pattern of elements in arrays. Unfortunately the insight is couched deep in mathematical obscurity:
Entropy considerations provide a natural estimate of the number of comparisons to sort incompletely shuffled data. From an information theoretic viewpoint, the number of comparisons needed to sort a permutation is an upper bound on the Kolmogorov complexity of the permutation.</description></item><item><title>Using Jackson Deduction to Simplify Deserialisation</title><link>https://tomregan.github.io/posts/2024-05-30-using-jackson-deduction-to-simplify-deserialisation/using-jackson-deduction-to-simplify-deserialisation/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/2024-05-30-using-jackson-deduction-to-simplify-deserialisation/using-jackson-deduction-to-simplify-deserialisation/</guid><description>I find the documentation for Jackson is on the terse side, and dare I say obstructively self-referential. If you aren&amp;rsquo;t moved fully to tears by the Javadoc entries for JsonTypeInfo.As, you deserve an ACM award.
In short: I need a helpful and up-to-date guide, so I&amp;rsquo;m writing one.
What are we trying to do? We often want to vary the content of our JSON. It&amp;rsquo;s integral to the Envelope pattern for instance.</description></item><item><title>Quick, Repeatable, Maintainable Maven Builds</title><link>https://tomregan.github.io/posts/2023-04-25-quick-repeatable-maintainable-maven-builds/maven-build-tips/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/2023-04-25-quick-repeatable-maintainable-maven-builds/maven-build-tips/</guid><description>There are few things more frustrating than running into issues with your build tool. One moment your build runs smoothly, and the next it fails inexplicably. Or maybe you&amp;rsquo;ve been typing mvn clean package for years without really knowing why. In this post, I&amp;rsquo;ll share some best practices for using Maven more effectively, and attempt to demystify some of its features.
Understand the Clean Plugin Running the Clean plugin during every build will spend unnecessary time on recompilation and packaging.</description></item><item><title>Making Pull Requests</title><link>https://tomregan.github.io/posts/making-pull-requests/</link><pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/making-pull-requests/</guid><description>I just got my first pull request accepted!</description></item><item><title>Loading a DTD from a JAR</title><link>https://tomregan.github.io/posts/loading-a-dtd-from-a-jar/</link><pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/loading-a-dtd-from-a-jar/</guid><description>Bundling resources into a jar file is a common way to deploy your Java application, useful because it makes the jar&amp;rsquo;s resources available to retrieve via the classloader at runtime.
When loading XML, you can require DTD veirification, which is a means of validating the XML is gramatical. Hopefully everything up till now is old news.
I struggled trying to load XML from the classpath to also have the DTD load correctly.</description></item><item><title>Writing Libraries in Bash</title><link>https://tomregan.github.io/posts/writing-libraries-in-bash/</link><pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/writing-libraries-in-bash/</guid><description>If you&amp;rsquo;re a Python programmer, chances are you&amp;rsquo;re familiar with the idiom:
if __name__ == &amp;#39;__main__&amp;#39;: main() This lets you put behaviour in a file that will only be executed if it&amp;rsquo;s run from the command line, not when it&amp;rsquo;s included in a program.
So it&amp;rsquo;s possible to achieve the same thing in bash, simply using:
[[ $0 != -${SHELL##*/} ]] &amp;amp;&amp;amp; main Could that be clearer? Probably. Here&amp;rsquo;s what it means from left to right:</description></item><item><title>Getting OCMock to play nicely with XCode 5</title><link>https://tomregan.github.io/posts/getting-ocmock-to-play-nicely-with-xcode-5/</link><pubDate>Sun, 17 Nov 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/getting-ocmock-to-play-nicely-with-xcode-5/</guid><description>I&amp;rsquo;ve started writing a dashboard Cocoa app, and I&amp;rsquo;ve found the process of setting up OCMock really unreasonably painful.
The Setup I got the OCMock framework from ocmock.org.
In my case I want the OSX directory for my Cocoa app, so I drag and drop OCMock.framework from the dmg onto the Frameworks group in the project navigator. This triggers a dialog to configure it.
The important things to note are:</description></item><item><title>Switching Text Editors</title><link>https://tomregan.github.io/posts/switching-text-editors/</link><pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/switching-text-editors/</guid><description>After 7 years, I&amp;rsquo;m finally doing the dirty dead: jumping off the Vim ship, into the [adjective], [adjective] something [noun] that is emacs. There follows a brief description of the process so far.
![Gnu by Dean Gugler at flickr CC BY-NC] (https://farm7.staticflickr.com/6173/6169267550_753ebd220b.jpg)
Gnu by Dean Gugler at flickr (CC BY-NC) Install a recent version of emacs My version of OS X has emacs 22.2 installed, which is way out of date.</description></item><item><title>Using Mockito as a Crutch</title><link>https://tomregan.github.io/posts/using-mockito-as-a-crutch/</link><pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/using-mockito-as-a-crutch/</guid><description>&amp;ldquo;omne trium perfectum&amp;rdquo;, as the Latins used to say: a set of three is perfect. Sadly I don&amp;rsquo;t have three facts I know about mockito, but I do have two facts. That&amp;rsquo;s not enough to impress anyone, which means almost by definition, it&amp;rsquo;s enough for a blog.
Returning different values from a mock on successive calls This is so basic, I expect I&amp;rsquo;m the last person to hear about it. I stumbled on it while trying to mock an Enumeration.</description></item><item><title>Hanging Out with Linked Hash Maps</title><link>https://tomregan.github.io/posts/hanging-out-with-linked-hash-map/</link><pubDate>Sun, 18 Aug 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/hanging-out-with-linked-hash-map/</guid><description>LinkedHashMap is a surprising useful data structure, and missing from many standard libraries.
In my case I have class that represents a message and contains a set of headers. Imagining an HTTP message might be useful. Historically these sets have been mapped using a configuration file that dictates the order of field keys and values (primarily it&amp;rsquo;s done this way to support ordered value-only fields):
0 key 1 1 value 1 2 key 2 .</description></item><item><title>Chopping Down Tall Classes</title><link>https://tomregan.github.io/posts/chopping-down-tall-classes/</link><pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/chopping-down-tall-classes/</guid><description>I&amp;rsquo;ve been having bags of fun today trying to get to grips with an enormously busy class. The carbuncle of code is basically a data structure that contains a tree of values loaded from a plain-text configuration file. To keep it from being too simple and boring, somebody decided you should be able to pass it an instance of our application, and have it call lots of configuration methods on it for you.</description></item><item><title>Pressing Buttons in Bash</title><link>https://tomregan.github.io/posts/pressing-buttons-in-bash/</link><pubDate>Sun, 12 May 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/pressing-buttons-in-bash/</guid><description>Shortcuts are a source of constant amusement as far as I&amp;rsquo;m concerned, and nothing on Earth makes me more ecstatically happy than accidentally discovering a new one. Today&amp;rsquo;s mis-fingering was ^t in bash, which roughly translated means transpose the character under the cursor and the previous character.
Two transposed characters is by far my commonest typo (vim: xp), so I&amp;rsquo;m not going to lie, I&amp;rsquo;m pretty happy. To celebrate I&amp;rsquo;m going to try and use bash this week by only touching letter keys, Ctrl, Alt and Shift.</description></item><item><title>Writing a Simple Gradle Build</title><link>https://tomregan.github.io/posts/writing-a-simple-gradle-build/</link><pubDate>Sun, 05 May 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/writing-a-simple-gradle-build/</guid><description>&amp;lsquo;Build as code&amp;rsquo; is one of those dreadful smells you start to recognise after a while, so gradle, which is a highly free-form system, is not my first choice for complex builds, but it is a beautiful way to build a simple set of modules. I&amp;rsquo;ve written something along the lines of the following build enough times for me to make a note of it for future copy-pasting, so here it is.</description></item><item><title>Deleting Files from Git Object Store</title><link>https://tomregan.github.io/posts/deleting-files-from-git-object-store/</link><pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/deleting-files-from-git-object-store/</guid><description>Tonight I accidentally did something stupid and committed binaries to my git repository, despite knowing better in the first place. After the commit I tried to push.
I hadn&amp;rsquo;t even noticed my mistake until I came back to my terminal after 10 minutes and saw
Writing objects: 42% (16/38), 10.02 MiB | 21 KiB/s Unfortunately simply git rm-ing the files is no good, because they&amp;rsquo;re in the object store at this point, which is essentially git&amp;rsquo;s historical record— its database of versions.</description></item><item><title>Defusing XML</title><link>https://tomregan.github.io/posts/defusing-xml/</link><pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/defusing-xml/</guid><description>XML: the most terrifying thing on the planet
Rule 1 of the Internet— is never, ever trust the Internet. Reading from a socket is the equivalent of putting your hand into an unknown box that&amp;rsquo;s full of snakes, but you don&amp;rsquo;t know it&amp;rsquo;s full of snakes and it ends up pretty touch-and-go as to whether you get out in one piece.
Getting XML over the wire is like that, but more terrifying and more dangerous.</description></item><item><title>Blogging with Pelican</title><link>https://tomregan.github.io/posts/blogging-with-pelican/</link><pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/blogging-with-pelican/</guid><description>All bloggers tend to pass through three phases: enthusiasm, occasional updates, and blogging about blogging&amp;hellip;
I got a little bit tired of the magic behind Octopress and decided to move to the &amp;lsquo;better for Me(tm)&amp;rsquo; platform Pelican. Pelican has been lovely and although Octopress was a great way to get started, I&amp;rsquo;m not blessed with a great deal of web-dev-ishness, I was never going to take the time to understand its many bundled frameworks.</description></item><item><title>Bringing Eclipse Shortcuts to XCode</title><link>https://tomregan.github.io/posts/bringing-eclipse-shortcuts-to-xcode/</link><pubDate>Sat, 12 Jan 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/bringing-eclipse-shortcuts-to-xcode/</guid><description>When I first arrived in the real world, I was introduced to new things; amongst these were &amp;lsquo;collaboration&amp;rsquo; and &amp;lsquo;gigantic code bases&amp;rsquo;. I grudgingly accepted the need for an IDE, and started to use Eclipse. There are actions I use in Eclipse regularly that I find really useful, like searching and manipulating text.
Recently doing some Cocoa development and getting started with XCode, I&amp;rsquo;ve been slowed down by having to learn these same actions again, using different, and sometimes hand-contorting, Emacsian keys.</description></item><item><title>Disable Cache in Chrome and Other Goodies</title><link>https://tomregan.github.io/posts/disable-cache-in-chrome-and-other-goodies/</link><pubDate>Sun, 06 Jan 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/disable-cache-in-chrome-and-other-goodies/</guid><description>Through some lucky keyboard-mashing I stumbled across a couple of useful developer features in Google Chrome, including an option to disable the cache, and settings for device testing. Here&amp;rsquo;s how to:
Bring up the inspector: ⌥ ⌘ i Hit fn F1 Voilà!
The general tab with cache options:
The overrides tab with device options:
I&amp;rsquo;ve popped some easter eggs in this post to amuse future-me.</description></item><item><title>Code Shame</title><link>https://tomregan.github.io/posts/code-shame/</link><pubDate>Thu, 03 Jan 2013 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/code-shame/</guid><description>Naturally when I write C I&amp;rsquo;m reasonably careful about a number of things. Because at runtime it&amp;rsquo;s a free-for-all, I take care to notice buffer overruns, uninitialized memory, and in particular the possible values assigned to a pointer.
I&amp;rsquo;ll back up a second, because unfortunately I recently managed to make a bit of a bollocks of the last point, which I only noticed when I came back to change the code.</description></item><item><title>Disabling the Next Button in an Eclipse Wizard</title><link>https://tomregan.github.io/posts/disabling-the-next-button-in-an-eclipse-wizard/</link><pubDate>Sun, 09 Dec 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/disabling-the-next-button-in-an-eclipse-wizard/</guid><description>I&amp;rsquo;ve been writing an Eclipse wizard that will be used to create new socket applications. The options selected in early in the wizard determine whether it&amp;rsquo;s appropriate for the user to configure connection properties before creating the project.
If you have written a wizard, chances are you&amp;rsquo;re familiar with the setPageComplete(complete:boolean) method that is used to enable the &amp;lsquo;Finish&amp;rsquo; button when enough user input has been gathered.
It&amp;rsquo;s more complicated to disable the &amp;lsquo;Next&amp;rsquo; button.</description></item><item><title>Lazy Instantiation in Objective C</title><link>https://tomregan.github.io/posts/lazy-instantiation-in-objective-c/</link><pubDate>Sun, 09 Dec 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/lazy-instantiation-in-objective-c/</guid><description>Lazy instantiation is a relatively cheap way of allocating memory to component objects as it&amp;rsquo;s required instead of up-front in a constructor.
{% highlight objectivec %} @interface MyStack() @property (nonatomic, strong) NSMutableArray *stack; @end
@implementation MyStack
@synthesize stack = _stack;
(NSMutableArray*)stack { if (_stack == nil) { _stack = [[NSMutableArray alloc] init]; } return _stack; } (void)push:(double)operand { [self.stack addObject: [NSNumber numberWithDouble:operand]]; } @end {% endhighlight %} This implementation overrides the synthesized accessor and adds an alloc-init call if the storage hasn&amp;rsquo;t yet been initialized.</description></item><item><title>Unit Testing in C with Check</title><link>https://tomregan.github.io/posts/unit-testing-in-c-with-check/</link><pubDate>Sun, 09 Dec 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/unit-testing-in-c-with-check/</guid><description>###Pushy I&amp;rsquo;ve been developing a cheerfully indolent little HTTP server for some time now, as one of those &amp;rsquo;learn-more-c&amp;rsquo;, &amp;rsquo;learn-TDD&amp;rsquo; projects that I imagine nearly everyone has lying around, half neglected.
You can see the code for pushy on github.
I&amp;rsquo;ve also been familiarizing myself with the HTTP RFCs as I go, so I was planning to add a 414 response^[1] to pushy&amp;rsquo;s repertoire, which I reckoned would take me about 30 minutes, but I have the TDD policy on this project, so naturally I can&amp;rsquo;t write a line of code until there&amp;rsquo;s a failing test.</description></item><item><title>Deploying an XML File with Maven</title><link>https://tomregan.github.io/posts/deploying-an-xml-file-with-maven/</link><pubDate>Tue, 06 Nov 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/deploying-an-xml-file-with-maven/</guid><description>Something clever we&amp;rsquo;ve started doing at work is publishing common build files to our local maven repository, so builds can depend on known versions of scripts, rather than just the latest from source control.
Setting this up for the simplest case, involves uploading a single file, for instance an ant script, to the repository. The best way I&amp;rsquo;ve seen this done uses the build-helper plugin, which — amongst many other things — can be used to deploy any file as the primary build artifact.</description></item><item><title>Fixing a Permissions Error Opening a Semaphore</title><link>https://tomregan.github.io/posts/fixing-a-permissions-error-opening-a-semaphore/</link><pubDate>Sat, 06 Oct 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/fixing-a-permissions-error-opening-a-semaphore/</guid><description>Today I spent a couple of hours getting semaphores to work.
I was opening a semaphore like this:
{% highlight c %} if (SEM_FAILED == (CACHE_LOCK = sem_open(&amp;quot;/cache_lock&amp;quot;, O_CREAT, 0660, 1))) { printf(&amp;ldquo;error opening semphore: %i\n&amp;rdquo;, errno); return -1; /* error creating semaphore */ } {% endhighlight %}
This runs fine on my Mac, but fails on an Ubuntu machine. On failure it sets errno to EACCESS (13). Whatever you might expect, this fact alone did not allow me to figure out the cause of the problem.</description></item><item><title>Reading from Sockets</title><link>https://tomregan.github.io/posts/reading-from-sockets/</link><pubDate>Sat, 22 Sep 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/reading-from-sockets/</guid><description>This is a story about how I learned to read streams from sockets, or to put it another way:
{% highlight diff %}
strncpy(msg_buf, &amp;ldquo;HTTP/1.0 404 Not Found\r\n&amp;rdquo;, HTTP_RESPONSE_LEN); strncpy(msg_buf, &amp;ldquo;HTTP/1.1 404 Not Found\r\n&amp;rdquo;, HTTP_RESPONSE_LEN); {% endhighlight %} How I learned to stop worrying and begin to implement HTTP/1.1.
That&amp;rsquo;s pushy. All it knows is it doesn&amp;rsquo;t know.
HTTP/1.0 For most of the practical work I&amp;rsquo;ve done with sockets until now I&amp;rsquo;ve used datagrams, so I decided that all socket reads, including streaming connections, work in the same way as HTTP/1.</description></item><item><title>Saving the Workspace from an Eclipse Plugin</title><link>https://tomregan.github.io/posts/saving-the-workspace-from-an-eclipse-plugin/</link><pubDate>Mon, 17 Sep 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/saving-the-workspace-from-an-eclipse-plugin/</guid><description>Since I&amp;rsquo;m going to the trouble of making a plugin for Eclipse, I thought I may as well try and make if look and feel a bit Eclipsy, so when it came to writing an export feature to bundle the user&amp;rsquo;s project, I decided it would be a jolly good thing if the user got a dialog to prompt them to save their changes, much as when you run an application in Eclipse.</description></item><item><title>Fixing Git Upload Pack Not Found</title><link>https://tomregan.github.io/posts/fixing-git-upload-pack-not-found/</link><pubDate>Sat, 08 Sep 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/fixing-git-upload-pack-not-found/</guid><description>I&amp;rsquo;ve only just realised that blogging about problems is a great way of delaying doing the thing I intended to get done in the first place.
I&amp;rsquo;ve just changed the location of git repositories on my server so that instead of living in a directory belonging to the user &amp;rsquo;tom&amp;rsquo;, they now live in the home directory belonging to &amp;lsquo;git&amp;rsquo;.
Basically, it means when I create a new repository on my server I don&amp;rsquo;t have to remember:</description></item><item><title>Monitor a Long Running Process with Control T</title><link>https://tomregan.github.io/posts/monitor-a-long-running-process-with-control-t/</link><pubDate>Fri, 07 Sep 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/monitor-a-long-running-process-with-control-t/</guid><description>One of the nice things about being in Linux exile is learning about new things that I hadn&amp;rsquo;t noticed were missing from my life, like being able to tell if a process has hung, or it&amp;rsquo;s just taking a really long time.
tom@binky:~:$ cp Downloads/FreeBSD-9.0-RELEASE-i386-disc1.iso . ... ^t ... load: 0.17 cmd: cp 20253 running 0.00u 0.16s Downloads/FreeBSD-9.0-RELEASE-i386-disc1.iso -&amp;gt; ./FreeBSD-9.0-RELEASE-i386-disc1.iso 35% Hitting Control-t while waiting for a process to complete outputs, and &amp;lsquo;scuse me while I quote from the manpage:</description></item><item><title>Building an Eclipse Plugin with Tycho</title><link>https://tomregan.github.io/posts/building-an-eclipse-plugin-with-tycho/</link><pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/building-an-eclipse-plugin-with-tycho/</guid><description>I spent a couple of days this week converting the build of an Eclipse plugin project from Ant with Ivy to Maven using the Tycho plugins. I&amp;rsquo;ll demonstrate the build with an example project.
First off I already have the following pre-requisites:
Eclipse 4.2 Eclipse PDE Maven 3 Create a plugin project in Eclipse I created the following:
a plugin, with some simple functionality a feature project (features are just groupings of related plugins) an update site, which acts as a distributable package Each project is a necessary part of the build: the site contains a feature, and the feature contains one or more plugins.</description></item><item><title>Unit Testing in C with Check - Setting Up a Project</title><link>https://tomregan.github.io/posts/unit-testing-in-c-with-check-setting-up-a-project/</link><pubDate>Mon, 27 Aug 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/unit-testing-in-c-with-check-setting-up-a-project/</guid><description>In a previous post I went through the steps to run the Check tutorial, had a bit of a whinge about how difficult is had all been, and mumbled a bit about coming back when I&amp;rsquo;d figured out how to make everything work on a real project. In fact, that was much simpler than I expected.
At the end of this, I&amp;rsquo;ll have a simple C program with a corresponding build that uses the Check testing framework.</description></item><item><title>To Sudo or not to Sudo</title><link>https://tomregan.github.io/posts/to-sudo-or-not-to-sudo/</link><pubDate>Sat, 25 Aug 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/to-sudo-or-not-to-sudo/</guid><description>This is a pretty neat trick I&amp;rsquo;ve just seen in a tutorial from the chaps at opscode.
I&amp;rsquo;ve got a command whose output needs to be processed using sudo (a realistic example is curling down a file to install); I&amp;rsquo;ve got at least three principals that apply in this situation:
only use sudo if privileges need to be escalated waste not a minute one line all of the things So:</description></item><item><title>Unpacking Maven Dependencies</title><link>https://tomregan.github.io/posts/unpacking-maven-dependencies/</link><pubDate>Tue, 07 Aug 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/unpacking-maven-dependencies/</guid><description>Unpacking a kit for inclusion in a Java library The first time I came to do this I was new to maven and I didn&amp;rsquo;t know about the maven-dependency-plugin, so I had a hard time keeping a handle on the downloaded kit. Well, I&amp;rsquo;m back, and this time I mean business.
I&amp;rsquo;ve listed the plugins I used in something like sequential order:
maven-dependency-plugin The maven-dependency-plugin is used to download a kit which contains a bunch of templates used in my artifact (which happens to be a Java library).</description></item><item><title>Using JVM Shutdown Hooks to Kill a Child Process</title><link>https://tomregan.github.io/posts/using-jvm-shutdown-hooks-to-kill-a-child-process/</link><pubDate>Mon, 06 Aug 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/using-jvm-shutdown-hooks-to-kill-a-child-process/</guid><description>Today I spent some time writing a runner for a command-line Java socket application. I&amp;rsquo;d assumed that it would be easy enough to quit the process by hitting ^C. I&amp;rsquo;m here to report that this is not the case.
Hitting ^C shuts down the JVM, so if you&amp;rsquo;ve forked a separate Java process it&amp;rsquo;ll become orphaned.
To get past this you have to implement a shutdown hook, which will run during the JVM shutdown sequence, in effect allowing your application to handle the signal.</description></item><item><title>Modular Projects with Bash</title><link>https://tomregan.github.io/posts/modular-projects-with-bash/</link><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/posts/modular-projects-with-bash/</guid><description>I try to use bash scripts wherever I can over ruby or python. Partly that&amp;rsquo;s down to stubbornness, but it&amp;rsquo;s mostly because the problems I&amp;rsquo;m trying to solve can be tackled with the tools already available in UNIX.
One of my past sprawling bash projects was a tool that I used for simple, repetitive tasks, like creating new source files from templates, creating working tree structures for projects, running unit tests, and so on.</description></item></channel></rss>